ðŸ“š 1. What is Struct Embedding?
Struct embedding is like inheritance in other languages (but not exactly the same).
âœ… It's Go's way of doing "inheritance", but using composition, which is a cleaner design principle.



In Go:
    You embed a struct into another struct.
    The outer struct automatically gets access to the fields and methods of the embedded struct.
    It promotes the embedded structâ€™s fields and methods.


ðŸ‘‰ It's code reuse + composition over inheritance.

    type Animal struct {
        Name string
    }

    func (a Animal) Speak() {
        fmt.Println("I am", a.Name)
    }

    type Dog struct {
        Animal  // <--- embedding Animal
        Breed string
    }

    func main() {
        d := Dog{
            Animal: Animal{Name: "Tommy"},
            Breed:  "Labrador",
        }

        d.Speak()   // Can directly call Speak() from Animal
        fmt.Println(d.Name) // Can access Name directly
        fmt.Println(d.Breed) // Dog's own field
    }

ðŸ“š 2. Application (Why/When to use struct embedding)


    Scenario                How Embedding Helps

    Code reuse              Share common fields/methods across different structs without copying
    Extend behavior         Add more specific fields/methods in child struct
    Design hierarchy        Base struct has common stuff, embedded structs have specific stuff
    Interface implementation  If embedded struct implements an interface, outer struct automatically does too!





ðŸ“š 5. Real-World Examples in Standard Library

    âœ… http.Server embeds net.Listener.

    âœ… json.Decoder embeds io.Reader.

    âœ… errors.errorString embeds a struct for error handling.

    âœ… You also see embedding a lot when building REST API models, ORM structs, etc.





