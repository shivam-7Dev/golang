What is a Closure?(Function + Environment)

A closure is a function value that references variables from outside its body. 
he function may access and assign to these variables;
in this sense, the function is "bound" to these variables.

A closure "closes over" its outer variables,
 preserving access to them even when the outer function has returned.

Key Characteristics:

    Function + Environment: A closure is a function plus its enclosing environment 
                            (the variables it can access)
    Persistent State: Variables in the closure's environment persist between calls

    Lexical Scoping: The function can access variables that were in scope when it was declared


ðŸ§  Key Concepts

    A function literal (aka anonymous function) is declared inline.
    That function can access and modify variables outside its scope.
    These outer variables live on, not being garbage-collected, as long as the closure uses them.


How Closures Work in Go:

    func main() {
        x := 0
        increment := func() int {
            x++
            return x
        }
        
        fmt.Println(increment()) // 1
        fmt.Println(increment()) // 2
        fmt.Println(increment()) // 3
    }

    Here, increment is a closure that captures the variable x.
    Each call to increment modifies and returns the incremented value of x.



Another exmaple:
    
    func outer() func() int {
        x := 0
        return func() int {
            x++
            return x
        }
    }

    Here:
    ðŸ‘‰ Each call to outer() returns a new closure with its own independent state.
        x is declared in outer.
        The returned function (closure) remembers x, and keeps modifying it.


ðŸ“¦ Full Example
        package main
        import "fmt"

        func counter() func() int {
            count := 0
            return func() int {
                count++
                return count
            }
        }

        func main() {
            c := counter()
            fmt.Println(c()) // 1
            fmt.Println(c()) // 2
            fmt.Println(c()) // 3

            d := counter()
            fmt.Println(d()) // 1 (fresh instance)
        }
        ðŸ‘‰ Each call to counter() returns a new closure with its own independent state.



        MY defination: when parent funtion returns a clild funcition or inner funciton 
                        and that inner function is making user of varaibles declared in parents
                        the the returned function is called closure (fuction+surrounding varaiable)
                        and that  clsoure fuction have access to the parents varaible


Under the Hood: Implementation Details
When you create a closure in Go:

    Heap Allocation: The compiler detects that a variable is captured by a closure 
                        and allocates it on the heap rather than the stack

    Pointer Retention: The closure maintains a reference (pointer) to the captured variables

    Extended Lifetime: Captured variables live as long as any closure referencing them exists

    This is different from regular function calls where local variables are typically stack-allocated 
    and destroyed when the function returns.



Benefits of Using Closures in Go

    1. State Encapsulation
        Closures allow you to create functions with persistent state
        without exposing that state to the rest of your program:


        func newCounter() func() int {
            count := 0
            return func() int {
                count++
                return count
            }
        }

        func main() {
            counter := newCounter()
            fmt.Println(counter()) // 1
            fmt.Println(counter()) // 2
        }

    2. Function Factories=> You can generate specialized functions:

        func makeMultiplier(factor int) func(int) int {
            return func(x int) int {
                return x * factor
            }
        }

        func main() {
            double := makeMultiplier(2)
            triple := makeMultiplier(3)
            fmt.Println(double(5)) // 10
            fmt.Println(triple(5)) // 15
        }


    3. Callbacks and Handlers=> Closures are commonly used with HTTP handlers:

        func main() {
            prefix := "Hello, "
            http.HandleFunc("/greet", func(w http.ResponseWriter, r *http.Request) {
                name := r.URL.Query().Get("name")
                fmt.Fprintf(w, "%s%s", prefix, name)
            })
            http.ListenAndServe(":8080", nil)
        }

    4. Deferred Execution =>Closures are often used with defer 
                            to capture values at the point of deferral:

        func main() {
            x := 10
            defer func() {
                fmt.Println("Deferred:", x) // Captures x at defer time
            }()
            x = 20
            fmt.Println("Current:", x) // Prints 20
            // Deferred function prints 10
        }


    5. Iterators and Generators =>Closures can create iterator-like behavior:

        func fibonacci() func() int {
            a, b := 0, 1
            return func() int {
                ret := a
                a, b = b, a+b
                return ret
            }
        }

        func main() {
            f := fibonacci()
            for i := 0; i < 10; i++ {
                fmt.Println(f())
            }
        }


Common Pitfalls with Closures in Go

    1. Loop Variable Capture=>The most notorious closure pitfall in Go:

        func main() {
            var funcs []func()
            for i := 0; i < 3; i++ {
                funcs = append(funcs, func() {
                    fmt.Println(i)
                })
            }
            for _, f := range funcs {
                f() // All print 3!
            }
        }

        Solution: Create a new variable in each iteration:

        for i := 0; i < 3; i++ {
        i := i // Create new variable in each iteration
        funcs = append(funcs, func() {
            fmt.Println(i)
        })
        }

        Or pass as parameter:

        for i := 0; i < 3; i++ {
            funcs = append(funcs, func(i int) func() {
                return func() { fmt.Println(i) }
            }(i))
        }


    2. Goroutine Variable Capture=> Similar issue with goroutines:

        for _, v := range values {
            go func() {
                fmt.Println(v) // All goroutines print last value
            }()
        }

        Solution: Pass as parameter:


        for _, v := range values {
            go func(v interface{}) {
                fmt.Println(v)
            }(v)
        }


    3. Memory Leaks=>Closures keep references to their environment, which can cause memory leaks:


        func processLargeData() {
            data := loadHugeDataset() // Large memory allocation
            process := func() {
                // Only uses small part of data
                fmt.Println(data[0])
            }
            // process keeps reference to all of data!
            // Even if we only need a small part
            defer process()
        }
        Solution: Extract only what you need:

        firstItem := data[0]
        process := func() {
            fmt.Println(firstItem)
        }

    4. Mutating Shared State=> Closures can lead to race conditions when sharing state:

        var count int
        var wg sync.WaitGroup

        for i := 0; i < 1000; i++ {
            wg.Add(1)
            go func() {
                defer wg.Done()
                count++ // Data race!
            }()
        }
        wg.Wait()
        fmt.Println(count) // Unpredictable result


        Solution: Use synchronization:

        var mu sync.Mutex
        // ...
        go func() {
            defer wg.Done()
            mu.Lock()
            defer mu.Unlock()
            count++
        }()

    5. Deferred Closure Evaluation =>Deferred closures evaluate arguments at execution time,
                                     not defer time:


        func main() {
            x := 1
            defer fmt.Println("Deferred:", x) // x evaluated immediately
            defer func() { fmt.Println("Deferred closure:", x) }() // x evaluated at end
            x = 2
        }
        // Output:
        // Deferred closure: 2
        // Deferred: 1

    6. Interface Satisfaction Issues=>Closures can make interface satisfaction non-obvious:

        type Handler interface {
            ServeHTTP(http.ResponseWriter, *http.Request)
        }

        // This works:
        var _ Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {})

        // This doesn't:
        var _ Handler = func(w http.ResponseWriter, r *http.Request) {} // Error



Best Practices
    Limit Captured Variables: Only capture what you need to minimize memory retention

    Document Captures: Comment complex closures to make captured variables clear

    Avoid Complex State: Prefer simple, single-purpose closures

    Consider Alternatives: For complex state, a struct with methods might be clearer

    Handle Concurrency Carefully: Be explicit about synchronization in concurrent closures


 