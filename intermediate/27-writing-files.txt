üìÅ Writing to a File in Go
Go‚Äôs os package provides all the tools needed for file operations: creating, opening, writing, and closing files.

key components:

    os  package
        functions

        Create(name string) (*File ,error)
        OpenFile(name string, flag int, perm Filemode)(*File,error)
        write(b []byte)(n int, err error)
        wirteStiring(s string)(n int, err error)


Best practice

    error handling 
    deferred closing
    permissions
    buffering


üîß Key Functions and Components


1. os.Create(name string) (*os.File, error)

    Creates a new file.
    If the file already exists, it will overwrite it.
    Returns a pointer to a File object and an error (if any).
        
        file, err := os.Create("example.txt")



2. os.OpenFile(name string, flag int, perm os.FileMode) (*os.File, error)


    More flexible than Create.
    You can open, create, or append using flags.
    You also set permissions.


    file, err := os.OpenFile("log.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)

    os.O_APPEND: appends to file
    os.O_CREATE: creates if doesn‚Äôt exist
    os.O_WRONLY: open as write-only
    0644: Unix file permission (owner: read/write, others: read)


3. file.Write(b []byte) (n int, err error)

    Writes bytes to the file.

    file.Write([]byte("Hello, World!\n"))

4. file.WriteString(s string) (n int, err error)

    Writes a string directly.

    file.WriteString("This is a string.\n")







üß™ Full Example

    package main

    import (
        "fmt"
        "os"
    )

    func main() {
        file, err := os.Create("example.txt")
        if err != nil {
            fmt.Println("Error creating file:", err)
            return
        }
        defer file.Close() // Best practice: close when done

        _, err = file.WriteString("Hello from Go!\n")
        if err != nil {
            fmt.Println("Error writing string:", err)
            return
        }

        _, err = file.Write([]byte("Writing with bytes too!\n"))
        if err != nil {
            fmt.Println("Error writing bytes:", err)
        }
    }


‚úÖ Best Practices


1. Error Handling:Always check for errors when creating/writing to a file.

    if err != nil {
        // Handle the error
    }



2. Defer File Closing:
    Use defer file.Close() right after opening the file. It ensures the file closes when the function exits.

    file, err := os.Create("file.txt")
    if err != nil {
        log.Fatal(err)
    }
    defer file.Close()

3. Permissions
Use the correct permission (e.g., 0644) when creating a file using OpenFile.

    Owner: read/write

    Group & others: read



4. Buffering with bufio.Writer (for better performance)


If you're writing frequently or writing lots of small data, use a buffer to reduce disk writes.

 

    package main

    import (
        "bufio"
        "fmt"
        "os"
    )

    func main() {
        file, err := os.Create("buffered.txt")
        if err != nil {
            fmt.Println("Error:", err)
            return
        }
        defer file.Close()

        writer := bufio.NewWriter(file)
        writer.WriteString("Buffered writing is efficient.\n")

        // Important! Write from buffer to file
        writer.Flush()
    }




üîÑ Summary Table


    Function	                Description
    os.Create()	                Creates a file (overwrites if exists)
    os.OpenFile()	            Opens a file with flags and permissions
    Write()	                    Writes bytes
    WriteString()	            Writes strings
    defer file.Close()	        Ensures file is closed
    bufio.NewWriter()	        Adds buffer layer for performance
    Flush()                 	Pushes buffered data to file






üîÅ Algorithm: Buffered File Copy

    Open the source file in read-only mode.

    Create or open the destination file in write mode.

    Create a bufio.Reader for the source.

    Create a bufio.Writer for the destination.

    Use a loop to:

    Read chunks from the source into a buffer

    Write those chunks to the destination

    Flush the writer to ensure all data is written.

    Close both files.

    package main

    import (
        "bufio"
        "fmt"
        "io"
        "os"
    )

    func copyFileBuffered(srcPath, dstPath string) error {
        // Step 1: Open source file
        srcFile, err := os.Open(srcPath)
        if err != nil {
            return fmt.Errorf("failed to open source: %w", err)
        }
        defer srcFile.Close()

        // Step 2: Create destination file
        dstFile, err := os.Create(dstPath)
        if err != nil {
            return fmt.Errorf("failed to create destination: %w", err)
        }
        defer dstFile.Close()

        // Step 3 & 4: Create buffered reader and writer
        reader := bufio.NewReader(srcFile)
        writer := bufio.NewWriter(dstFile)

        // Step 5: Create a buffer and loop
        buffer := make([]byte, 1024*1024) // 1 MB buffer
        for {
            n, err := reader.Read(buffer)
            if err != nil && err != io.EOF {
                return fmt.Errorf("read error: %w", err)
            }
            if n == 0 {
                break // End of file
            }

            if _, err := writer.Write(buffer[:n]); err != nil {
                return fmt.Errorf("write error: %w", err)
            }
        }

        // Step 6: Flush writer
        if err := writer.Flush(); err != nil {
            return fmt.Errorf("flush error: %w", err)
        }

        return nil
    }

    func main() {
        err := copyFileBuffered("source.dat", "destination.dat")
        if err != nil {
            fmt.Println("Error copying file:", err)
        } else {
            fmt.Println("File copied successfully.")
        }
    }
