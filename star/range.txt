The range keyword in Go is used to iterate over elements in various data structures

range is primarily used to iterate over:

    Arrays and slices

    Maps

    Strings (iterating over Unicode characters)

    Channels (reading values until the channel is closed)

It simplifies looping by providing access to both the index/key and the value of the elements.\


Iterating Over Arrays/Slices

    fruits := []string{"apple", "banana", "cherry"}

    for i, fruit := range fruits {
        fmt.Printf("Index: %d, Value: %s\n", i, fruit)
    }

Iterating Over Maps

    ages := map[string]int{
        "Alice": 25,
        "Bob":   30,
        "Carol": 28,
    }

    for name, age := range ages {
        fmt.Printf("%s is %d years old\n", name, age)
    }


 Iterating Over Strings

    str := "Hello, 世界"

    for i, r := range str {
        fmt.Printf("Byte position: %d, Unicode code point: %U, Character: %c\n", i, r, r)
    }


 Iterating Over Channels

    ch := make(chan int)

    go func() {
        ch <- 1
        ch <- 2
        ch <- 3
        close(ch)
    }()

    for num := range ch {
        fmt.Println(num)
    }

 


Best Practices
    Use the blank identifier _ for unused variables to make intent clear

    Be explicit about whether you need indices or just values

    Remember that strings are iterated by runes, not bytes

    For maps, don't rely on iteration order

    Always close channels when you're done with them to avoid deadlocks

    Consider performance implications for very large datasets
