 Functions are fundamental building blocks in Go programming

Table of Contents
    Basic Function Syntax
    Function Parameters and Return Values
    Variadic Functions
    Named Return Values
    Functions as Values
    Anonymous Functions and Closures
    Defer, Panic, and Recover
    Error Handling in Functions
    Function Recursion
    Advanced Function Patterns
    Common Gotchas and Pitfalls
    Best Practices

Basic Function Syntax

    1 Simple Function Definition

        func functionName() {
            // function body
        }
    
    2 Function with Parameters

        func greet(name string) {
            fmt.Printf("Hello, %s!\n", name)
        }

    3 Function with Return Value

        func add(a int, b int) int {
            return a + b
        }

Function Parameters and Return Values

    1 Multiple Parameters
        func multiply(a, b int) int {  
            // Type can be specified once for consecutive same-type params
            return a * b
        }
            
    2 Multiple Return Values

        func divide(a, b float64) (float64, error) {
            if b == 0.0 {
                return 0.0, errors.New("division by zero")
            }
            return a / b, nil
        }       


Named Return Values =>Go allows you to name return values:

        func rectangleProps(length, width float64) (area, perimeter float64) {
            area = length * width
            perimeter = 2 * (length + width)
            return // naked return
        }
    Pitfall: Named returns can lead to subtle bugs if you're not careful with shadowing:

    func badExample(x int) (result int) {
        result = x * 2
        if x > 10 {
            result := x * 3  // This shadows the named return
            fmt.Println(result)
        }
        return  // returns the outer result, not the shadowed one
    }


Functions as Values=>:In Go, functions are first-class citizens:


    func square(n int) int {
        return n * n
    }

    func main() {
        // Assign function to variable
        f := square
        fmt.Println(f(5))  // 25
        
        // Function as parameter
        printResult(square, 6)  // "Result: 36"
    }

    func printResult(fn func(int) int, x int) {
        fmt.Printf("Result: %d\n", fn(x))
    }



Anonymous Functions and Closures


Anonymous Function

    func main() {
        // Immediately invoked
        func() {
            fmt.Println("Hello from anonymous function!")
        }()
        
        // Assigned to variable
        greet := func(name string) {
            fmt.Printf("Hello, %s!\n", name)
        }
        greet("Alice")
    }
Closure Example=>Closures capture the surrounding environment:

    func counter() func() int {
        i := 0
        return func() int {
            i++
            return i
        }
    }

    func main() {
        c := counter()
        fmt.Println(c())  // 1
        fmt.Println(c())  // 2
        fmt.Println(c())  // 3
    }
Gotcha: Be careful with loop variables in closures:

    func main() {
        var funcs []func()
        for i := 0; i < 3; i++ {
            funcs = append(funcs, func() {
                fmt.Println(i)  // All will print 3!
            })
        }
        for _, f := range funcs {
            f()
        }
    }
    Fix by creating a new variable in each iteration:


    for i := 0; i < 3; i++ {
        i := i  // Create new variable in each iteration
        funcs = append(funcs, func() {
            fmt.Println(i)  // Now prints 0, 1, 2
        })
    }


Best Practices
    Keep Functions Small and Focused:
        A function should do one thing and do it well
        Ideally less than 20 lines of code
    Meaningful Names:
        Use descriptive names for functions and parameters
        Follow Go naming conventions (camelCase)
    Limit Parameters:
        Try to keep parameter count low (3-4 max)
        Consider using structs for complex configurations
    Error Handling:
        Always handle errors explicitly
        Return errors as the last return value
        Wrap errors with context when propagating
    Documentation:
    Document exported functions with doc comments
        // CalculateSum computes the sum of two integers.
        // It returns the result as an int.
        func CalculateSum(a, b int) int {
            return a + b
        }      
    Avoid Global State:
        Prefer passing dependencies as parameters
        Makes functions more testable and predictable
    Consistent Return Types:
        If multiple functions perform similar operations, keep their return types consistent
    Use Naked Returns Judiciously:
        Only use with very short functions where it improves readability
        Avoid in most cases to prevent confusion
    Consider Performance:
        For small, frequently called functions, consider inlining
        Be aware of function call overhead in tight loops
    Testing:
        Write testable functions (single responsibility, pure when possible)
        Use table-driven tests for comprehensive coverage









































































































































































































